version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: social_media_agent
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d social_media_agent"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # AI Social Media Agent - Web Dashboard
  web:
    build: .
    command: python main.py --mode web
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/social_media_agent
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Social Media Agent - 24/7 Scheduler
  scheduler:
    build: .
    command: python main.py --mode daemon
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/social_media_agent
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    restart: unless-stopped

  # API Server (Optional)
  api:
    build: .
    command: python main.py --mode api
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/social_media_agent
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - api  # Optional service, start with: docker-compose --profile api up

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge